{"version":3,"sources":["assets\\scripts\\common\\managers\\EventMgr.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class EventMgr extends cc.Component {\n\n    public static Instance: EventMgr = null as unknown as EventMgr;\n\n    /** 事件派發平台結構:\n     *  { event_1: [訂閱1_obj{caller: caller, func: func}, 訂閱2_obj{}, ... 訂閱3, 訂閱4 ...], \n     *    event_2: [訂閱1_obj{caller: caller, func: func}, 訂閱2_obj{}, ... 訂閱3, 訂閱4 ...],\n     *    event_3: ...\n     *  } */\n     public EventMap = {};\n\n    onLoad () {\n        if (EventMgr.Instance === null) {\n            EventMgr.Instance = this;\n        } else {\n            console.error(`[error]: ${this} has multi instances.` );\n            this.destroy();\n            console.log(`[fix]: ${this} has been destroyed.`);\n            return;\n        };\n    }\n\n    /** 增加事件訂閱者 || eventName: 事件名稱 || caller: 訂閱者 || func: 回調函數 */\n    public addEventListener(eventName, caller, func: Function) {\n        if (!this.EventMap[eventName]) {\n            this.EventMap[eventName] = [];\n        };\n        // 在對應的該事件名稱(array)下新增訂閱者(obj)\n        let queue = this.EventMap[eventName];\n        queue.push({\n            caller: caller,\n            func: func\n        });\n    }\n\n    /** 移除事件訂閱者 || eventName: 事件名稱 || caller: 訂閱者 || func: 回調函數 */\n    public removeEventListener(eventName, caller, func: Function) {\n        if (!this.EventMap[eventName]) { return };\n        // 遍歷map該事件obj中尋找指定的該訂閱者\n        let queue = this.EventMap[eventName];\n        for (let i = 0; i < queue.length; i++) {\n            let obj = queue[i];\n            if (obj.caller == caller && obj.func == func) {\n                queue.splice(i, 1);\n                break;\n            };\n        };\n        // 如果已經沒有人訂閱了\n        if (queue.length <= 0) {\n            this.EventMap[eventName] = null;\n        }\n    }\n\n    /** 強制移除該事件訂閱的所有回調函數 */\n    public removeEventListenerAllCallbacks(eventName, caller) {\n        if (!this.EventMap[eventName]) { return };\n        // 遍歷map該事件obj中尋找指定的該訂閱者\n        let queue = this.EventMap[eventName];\n        for (let i = 0; i < queue.length; i++) {\n            let obj = queue[i];\n            if (obj.caller == caller) {\n                queue.splice(i, 1);\n                break;\n            };\n        };\n        // 如果已經沒有人訂閱了\n        if (queue.length <= 0) {\n            this.EventMap[eventName] = null;\n        }\n    }\n\n    /** 派送事件 */\n    public dispatchEvent(eventName, data) {\n        if (!this.EventMap[eventName]) { return; };\n        // 對該事件的所有訂閱者派發事件\n        let queue = this.EventMap[eventName];\n        for (let i = 0; i < queue.length; i++) {\n            let obj = queue[i];\n            obj.func.call(obj.caller, eventName, data);\n        };\n    }\n\n}\n"]}