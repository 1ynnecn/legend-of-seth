{
  "__type__": "cc.TextAsset",
  "_name": "socket.io.d",
  "_objFlags": 0,
  "_native": "",
  "text": "/*\nExample:\n\n/// SERVER\n\nimport sio = module(\"socket.io\");\nimport http = module(\"http\");\n\nvar httpServer = http.createServer(app);\n\nvar io = sio.listen(httpServer);\nio.sockets.on('connection', function (socket: sio.Socket) {\n    socket.emit('news', { hello: 'world' });\n    socket.on('my other event', function (data) {\n        console.log(data);\n    });\n});\n\nhttpServer.listen(app.get('port'), function () {\n\n/// CLIENT\n\n<script src=\"/socket.io/socket.io.js\"></script>\n<script>\n  var socket = io.connect('http://localhost');\n  socket.on('news', function (data) {\n    console.log(data);\n    socket.emit('my other event', { my: 'data' });\n  });\n</script>\n{% endblock %}\n\n*/\n\n/// <reference path=\"node.d.ts\" />\n\ndeclare module \"socket.io\" {\n    export var version: string;\n    export var protocol: number;\n    export var clientVersion: string;\n    export function listen(server: any, options?: ManagerOptions, fn?): Manager;\n\n    interface SocketEmitter {\n    }\n\n    export interface Manager {\n        constructor(server, options: ManagerOptions);\n        server: any;\n        namespaces;\n        sockets: SocketNamespace;\n        settings: ManagerOptions;\n        store;\n        log;\n        static;\n        get(key);\n        set(key, value);\n        enable(key);\n        disable(key);\n        enabled(key);\n        disabled(key);\n        configure(env, fn);\n        //initStore();\n        //onHandshake(id, data);\n        //onConnect(id);\n        //onOpen(id);\n        //onDispatch(room, packet, volatile, exceptions);\n        //onJoin(id, name);\n        //onLeave(id, room);\n        //onClose(id);\n        //onClientDispatch(id, packet);\n        //onClientMessage(id, packet);\n        //onClientDisconnect(id, reason);\n        //onDisconnect(id, reason);\n        //handleRequest(req, res);\n        //handleUpgrade(req, socket, head);\n        //handleHTTPRequest(data, req, res);\n        //handleClient(data, req);\n        //generateId();\n        //handleHandshake(data, req, res);\n        //handshakeData(data);\n        //verifyOrigin(request);\n        //handlePacket(sessid, packet);\n        //authorize(data, fn);\n        //transports(data);\n        //checkRequest(req);\n        of(nsp);\n        //garbageCollection();\n    }\n\n    export interface SocketNamespace extends EventEmitter {\n        manager;\n        name;\n        sockets;\n        auth: boolean;\n        clients(room): any[];\n        log;\n        store;\n        json: boolean;\n        volatile: boolean;\n        in(room): SocketNamespace;\n        to(room): SocketNamespace;\n        except(id): SocketNamespace;\n        //setFlags(): SocketNamespace;\n        //packet(packet): SocketNamespace;\n        send(data: any): SocketNamespace;\n        socket(sid, readable?);\n        authorization(fn): SocketNamespace;\n\n        // Events\n        on(event: string, listener: Function): SocketNamespace;\n        on(event: 'connection', listener: (err: Error, socket: Socket) => void): SocketNamespace;\n    }\n\n    export interface Socket extends EventEmitter {\n        id;\n        namespace: SocketNamespace;\n        manager: Manager;\n        disconnected: boolean;\n        ackPackets: number;\n        acks: any;\n        readable: boolean;\n        store;\n        handshake;\n        transport;\n        log: boolean;\n        json: boolean;\n        volatile: Socket;\n        broadcast: Socket;\n        in(room): SocketNamespace;\n        to(room): SocketNamespace;\n        //setFlags();\n        //onDisconnect(reason)\n        join(name, fn): Socket;\n        leave(name, fn): Socket;\n        //packet(packet);\n        //dispatch(packet, volatile);\n        set(key, value, fn): Socket;\n        get(key, fn): Socket;\n        has(key, fn): Socket;\n        del(key, fn): Socket;\n        disconnect(): Socket;\n        send(data, fn): Socket;\n        emit(name, ...arguments: any[]): Socket;\n\n        // Events\n        on(event: string, callback: Function): Socket;\n        on(event: 'disconnect', callback: (socket: Socket) => void): Socket;\n\n    }\n\n    export interface StoreClient {\n        store: Store;\n        id;\n\n        //get(key, fn);\n        //set(key, value, fn);\n        //has(key, fn);\n        //del(key, fn);\n        //destroy(expiration);\n    }\n\n    export interface Store extends EventEmitter {\n        constructor(options);\n        client(id): StoreClient;\n        destroyClient(id, expiration);\n        destroy(expiration);\n\n        //publish();\n        //subscribe();\n        //unsubscribe();\n    }\n\n    export interface MemoryStore extends Store { }\n    export interface RedisStore extends Store {\n        constructor(opts: RedisStoreOptions);\n    }\n\n    export interface Transport {\n    }\n\n    export interface Static {\n    }\n\n    export interface parser {\n    }\n\n    export interface RedisStoreOptions {\n        nodeId?: Function;  // (fn) gets an id that uniquely identifies this node\n        redis?: Function;  // (fn) redis constructor, defaults to redis\n        redisPub?: any;  // (object) options to pass to the pub redis client\n        redisSub?: any;  // (object) options to pass to the sub redis client\n        redisClient?: any;  // (object) options to pass to the general redis client\n        pack?: Function; // (fn) custom packing, defaults to JSON or msgpack if installed\n        unpack?: Function; // (fn) custom packing, defaults to JSON or msgpack if installed\n    }\n\n    export interface ManagerOptions {\n        origins?; // : '*:*'\n        log?; // : true\n        store?: Store; // : new MemoryStore;\n        logger?; // : new Logger\n        static?;// : new Static(this)\n        heartbeats?;// : true\n        resource?;// : '/socket.io'\n        transports?;// : defaultTransports\n        authorization?;//: false\n        blacklist?;//: ['disconnect']\n        //'log level'?;//: 3\n        //'log colors'?;//: tty.isatty(process.stdout.fd)\n        //'close timeout'?;//: 60\n        //'heartbeat interval'?;//: 25\n        //'heartbeat timeout'?;//: 60\n        //'polling duration'?;//: 20\n        //'flash policy server'?;//: true\n        //'flash policy port'?;//: 10843\n        //'destroy upgrade'?;//: true\n        //'destroy buffer size'?;//: 10E7\n        //'browser client'?;//: true\n        //'browser client cache'?;//: true\n        //'browser client minification'?;//: false\n        //'browser client etag'?;//: false\n        //'browser client expires'?;//: 315360000\n        //'browser client gzip'?;//: false\n        //'browser client handler'?;//: false\n        //'client store expiration'?;//: 15\n        //'match origin protocol'?;//: false\n    }\n}"
}